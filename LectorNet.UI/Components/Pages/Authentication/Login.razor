@page "/auth/login"

@using System.Security.Claims
@using LectorNet.UI.Common.HttpResponseModels
@using LectorNet.UI.ViewModels
@using Microsoft.AspNetCore.Authentication

@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@inject IHttpContextAccessor HttoContextAccessor


<section class="h-full mx-auto flex flex-col items-center justify-center w-80">

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <ErrorAlert
            Title="Connexion échouée !"
            Message="@ErrorMessage"/>
    }

    <h3 class="text-3xl font-bold mb-6"> Se connecter</h3>
    <EditForm Model="LoginUserModel" FormName="loginForm" class="w-full" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator/>
        <div class="form-group">
            <InputText @bind-Value="LoginUserModel.Email" placeholder="Email" class="base-input"/>
            <ValidationMessage For="() => LoginUserModel.Email" class="error-input-message"/>
        </div>
        <div class="form-group">
            <InputText @bind-Value="LoginUserModel.Password" placeholder="Mot de passe" type="password"
                       class="base-input"/>
            <ValidationMessage For="() => LoginUserModel.Password" class="error-input-message"/>
        </div>
        <div class="self-start mb-5">
            <button class="base-button primary-color">Se connecter</button>
        </div>
        <div class="form-group self-start">
            <span class="text-xs block">Vous n'avez pas un compte ?
                <a href="/auth/register" class="text-green-700">Créer un compte</a>
            </span>
        </div>
    </EditForm>
</section>

@code {
    
    [SupplyParameterFromForm(FormName="loginForm")]
    private LoginUserModel LoginUserModel { get; set; } = new();

    private string ErrorMessage = string.Empty;

    private bool LoginIsSuccess;
    
    private async Task HandleLogin()
    {
            ErrorMessage = string.Empty;
            
            var client = ClientFactory.CreateClient("lectorNetApi");

            var response = await client.PostAsJsonAsync("auth/login", LoginUserModel);

            if (response.IsSuccessStatusCode)
            {
                try
                {
                    var loginResponse = await response.Content.ReadFromJsonAsync<AuthResponseModel>();

                    var claims = new List<Claim>
                    {
                        new(ClaimTypes.NameIdentifier, loginResponse!.FirstName),
                        new(ClaimTypes.Name, $"{loginResponse.FirstName} {loginResponse.LastName}"),
                        new(ClaimTypes.Role, loginResponse.Role)
                    };

                    var identity = new ClaimsIdentity(claims, AuthConstants.AuthScheme);
                    var principal = new ClaimsPrincipal(identity);
                    var authProperties = new AuthenticationProperties { IsPersistent = true };

                    if (HttoContextAccessor.HttpContext != null)
                        await HttoContextAccessor.HttpContext.SignInAsync(
                            AuthConstants.AuthScheme, principal, authProperties);

                    LoginIsSuccess = true;
                }
                catch (Exception)
                {
                    ErrorMessage = "Nous sommes désolés, une erreur est survenue. Veuillez réessayer ultérieurement.";
                }
                
                if(LoginIsSuccess) NavigationManager.NavigateTo("/");
            }
            else
            {
                ErrorMessage = (await response.Content.ReadFromJsonAsync<ErrorResponse>())?.Detail!;
            }
    }
}



