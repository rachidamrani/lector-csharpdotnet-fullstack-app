@page "/auth/login"

@using System.Security.Claims
@using LectorNet.Contracts.Authentication
@using LectorNet.UI.Common
@using LectorNet.UI.ViewModels
@using Microsoft.AspNetCore.Authentication

@inject AuthService AuthService
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager



<section class="h-full mx-auto flex flex-col items-center justify-center w-80">
    <h3 class="text-3xl font-bold mb-6"> Se connecter </h3>
    <EditForm Model="LoginModel" FormName="@FormName" method="post" OnValidSubmit="AuthenticateAsync" class="w-full">
        <DataAnnotationsValidator />
        <div class="form-group">
            <InputText @bind-Value="LoginModel.Email" placeholder="Email" class="base-input" />
            <ValidationMessage For="() => LoginModel.Email" class="error-input-message" />
        </div>
        <div class="form-group">
            <InputText @bind-Value="LoginModel.Password" placeholder="Mot de passe" type="password"
                       class="base-input" />
            <ValidationMessage For="() => LoginModel.Password" class="error-input-message" />
        </div>
        <div class="self-start mb-5">
            <button class="base-button primary-color" type="submit">Se connecter</button>
        </div>
        <div class="form-group self-start">
            <span class="text-xs block">Vous n'avez pas un compte ?
                <a href="/auth/register" class="text-green-700">Cr√©er un compte</a>
            </span>
        </div>
    </EditForm>
</section>

@code {

    private const string FormName = "LoginForm";

    [CascadingParameter] public HttpContext HttpContext { get; set; } = null!;

    [SupplyParameterFromForm]
    private LoginModel LoginModel { get; set; } = new();

    private ErrorResponse? _errorResponse = new();

    private async Task AuthenticateAsync()
    {
        // Add a try catch and delegate this code to the AuthService
        HttpResponseMessage response = await HttpClient.PostAsJsonAsync("http://localhost:5013/api/authentication/login",
        LoginModel);

        if (response.IsSuccessStatusCode)
        {
            var authResult = await response.Content.ReadFromJsonAsync<AuthenticationResponse>();

            var claims = new List<Claim> { 
                new Claim(ClaimTypes.NameIdentifier, authResult!.Id.ToString()), 
                new Claim(ClaimTypes.Name, $"{authResult!.FirstName} {authResult.LastName}"), 
                new Claim(ClaimTypes.Role, authResult.Role) 
            };

            var identity = new ClaimsIdentity(claims, AuthConstants.AuthScheme);
            var principal = new ClaimsPrincipal(identity);

            await HttpContext.SignInAsync(AuthConstants.AuthScheme, principal);

            NavigationManager.NavigateTo("/welcome");
        }
        else
        {
            _errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
        }
    }


    protected override async Task OnInitializedAsync()
    {
        if (await AuthService.UserIsAuthenticated())
        {
            NavigationManager.NavigateTo("/welcome");
        }
    }
}
