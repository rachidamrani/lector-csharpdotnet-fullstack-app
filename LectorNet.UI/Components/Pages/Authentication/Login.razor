@page "/auth/login"

@using System.Text
@using LectorNet.UI.Common
@using LectorNet.UI.Common.HttpResponseModels
@using LectorNet.UI.ViewModels

@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory

@rendermode InteractiveServer

<section class="h-full mx-auto flex flex-col items-center justify-center w-80">
    @if (IsLoading)
    {
        <LoadingSpinner/>
    }
    else
    {
        if (AlertIsOpen)
        {
            <Alert 
                Title="Connexion Echouée !"
                Message="@ErrorMessage"
                CloseAlertCallBack="CloseAlert"
                IsSuccess=false/>
        }
        
        <h3 class="text-3xl font-bold mb-6"> Se connecter</h3>
        <EditForm Model="LoginUserModel" class="w-full">
            <DataAnnotationsValidator/>
            <div class="form-group">
                <InputText @bind-Value="LoginUserModel.Email" placeholder="Email" class="base-input"/>
                <ValidationMessage For="() => LoginUserModel.Email" class="error-input-message"/>
            </div>
            <div class="form-group">
                <InputText @bind-Value="LoginUserModel.Password" placeholder="Mot de passe" type="password"
                           class="base-input"/>
                <ValidationMessage For="() => LoginUserModel.Password" class="error-input-message"/>
            </div>
            <div class="self-start mb-5">
                <button class="base-button primary-color" @onclick="AuthenticateAsync">Se connecter</button>
            </div>
            <div class="form-group self-start">
                <span class="text-xs block">Vous n'avez pas un compte ?
                    <a href="/auth/register" class="text-green-700">Créer un compte</a>
                </span>
            </div>
        </EditForm>
    }
</section>

@code {

    [CascadingParameter] public HttpContext HttpContext { get; set; } = null!;

    [SupplyParameterFromForm]
    private LoginUserModel LoginUserModel { get; set; } = new();
    
    private bool IsLoading { get; set; }
    
    private bool AlertIsOpen { get; set;  }

    private string? ErrorMessage { get; set; }

    private async Task AuthenticateAsync()
    {
        AlertIsOpen = false;
        IsLoading = true;
        ErrorMessage = "";

        try
        {
            var client = ClientFactory.CreateClient("lectorNetApi");

            var response = await client.PostAsJsonAsync("auth/login", LoginUserModel);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                AlertIsOpen = true;
                ErrorMessage = (await response.Content.ReadFromJsonAsync<ErrorResponse>())!.Detail;
            }
        }
        catch (Exception e)
        {
            ErrorMessage = "Une erreur est survenue !";
        }
        finally
        {
            IsLoading = false;
        }
    }

    public void CloseAlert()
    {
        AlertIsOpen = false;
        ErrorMessage = string.Empty;
    }
}



