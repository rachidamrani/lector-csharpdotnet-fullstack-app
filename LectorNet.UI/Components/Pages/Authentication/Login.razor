@page "/auth/login"

@using LectorNet.Contracts.Authentication
@using LectorNet.UI.Common
@using LectorNet.UI.Services
@using LectorNet.UI.ViewModels
@using Microsoft.AspNetCore.Authentication

@inject AuthService AuthService
@inject NavigationManager NavigationManager



<section class="h-full mx-auto flex flex-col items-center justify-center w-80">
    <h3 class="text-3xl font-bold mb-6"> Se connecter </h3>
    <EditForm Model="LoginUserModel" FormName="@FormName" method="post" OnValidSubmit="AuthenticateAsync" class="w-full">
        <DataAnnotationsValidator />
        <div class="form-group">
            <InputText @bind-Value="LoginUserModel.Email" placeholder="Email" class="base-input" />
            <ValidationMessage For="() => LoginUserModel.Email" class="error-input-message" />
        </div>
        <div class="form-group">
            <InputText @bind-Value="LoginUserModel.Password" placeholder="Mot de passe" type="password"
                class="base-input" />
            <ValidationMessage For="() => LoginUserModel.Password" class="error-input-message" />
        </div>
        <div class="self-start mb-5">
            <button class="base-button primary-color" type="submit">Se connecter</button>
        </div>
        <div class="form-group self-start">
            <span class="text-xs block">Vous n'avez pas un compte ?
                <a href="/auth/register" class="text-green-700">Cr√©er un compte</a>
            </span>
        </div>
    </EditForm>
</section>

@code {

    private const string FormName = "LoginForm";

    [CascadingParameter] public HttpContext HttpContext { get; set; } = null!;

    [SupplyParameterFromForm]
    private LoginUserModel LoginUserModel { get; set; } = new();

    private ErrorResponse? _errorResponse;

    private async Task AuthenticateAsync()
    {
        HttpResponseMessage response = await AuthService.Login(LoginUserModel);

        // For docker usage only
        // HttpResponseMessage response = await HttpClient.PostAsJsonAsync("http://backend/api/auth/login", LoginModel);

        if (response.IsSuccessStatusCode)
        {
            var authResult = await response.Content.ReadFromJsonAsync<AuthenticationResponse>();

            if (authResult != null)
            {
                var principal = AuthService.UserToClaims(authResult);

                await HttpContext.SignInAsync(AuthConstants.AuthScheme, principal);
            }

            NavigationManager.NavigateTo("/welcome");
        }
        else
        {
            _errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
        }
    }

}
