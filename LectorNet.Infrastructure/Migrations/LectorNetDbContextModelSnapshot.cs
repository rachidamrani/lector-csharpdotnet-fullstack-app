// <auto-generated />
using System;
using LectorNet.Infrastructure.Common.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LectorNet.Infrastructure.Migrations
{
    [DbContext(typeof(LectorNetDbContext))]
    partial class LectorNetDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("LectorNet.Domain.Models.BookExchanges.BookExchange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RequesterId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.HasIndex("RequesterId");

                    b.ToTable("BookExchanges");
                });

            modelBuilder.Entity("LectorNet.Domain.Models.Books.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AlreadyRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BookCoverLink")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("int");

                    b.Property<string>("PublicationYear")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PublishingHouse")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("27c9a909-1df6-4bb7-ba85-ef5d8d7694b3"),
                            AlreadyRead = true,
                            Author = "J.D. Salinger",
                            BookCoverLink = "https://example.com/catcher-in-the-rye.jpg",
                            CreatedAt = new DateTime(2024, 12, 30, 20, 37, 14, 724, DateTimeKind.Local).AddTicks(3360),
                            Genre = "Fiction",
                            Isbn = "9780316769488",
                            NumberOfPages = 277,
                            PublicationYear = "1951",
                            PublishingHouse = "Little, Brown and Company",
                            Title = "The Catcher in the Rye",
                            UpdatedAt = new DateTime(2024, 12, 30, 20, 37, 14, 724, DateTimeKind.Local).AddTicks(3570),
                            UserId = new Guid("4cccf9b3-459a-4d06-95c5-222e0451ca3a")
                        },
                        new
                        {
                            Id = new Guid("d927fcdc-7c4c-41de-b553-c2fc6e63d816"),
                            AlreadyRead = false,
                            Author = "George Orwell",
                            BookCoverLink = "https://example.com/1984.jpg",
                            CreatedAt = new DateTime(2024, 12, 30, 20, 37, 14, 724, DateTimeKind.Local).AddTicks(3710),
                            Genre = "Dystopian",
                            Isbn = "9780451524935",
                            NumberOfPages = 328,
                            PublicationYear = "1949",
                            PublishingHouse = "Secker & Warburg",
                            Title = "1984",
                            UpdatedAt = new DateTime(2024, 12, 30, 20, 37, 14, 724, DateTimeKind.Local).AddTicks(3720),
                            UserId = new Guid("4cccf9b3-459a-4d06-95c5-222e0451ca3a")
                        },
                        new
                        {
                            Id = new Guid("677f3612-b16f-46ca-abb0-c832657c6f45"),
                            AlreadyRead = true,
                            Author = "Harper Lee",
                            BookCoverLink = "https://example.com/to-kill-a-mockingbird.jpg",
                            CreatedAt = new DateTime(2024, 12, 30, 20, 37, 14, 724, DateTimeKind.Local).AddTicks(3720),
                            Genre = "Classic",
                            Isbn = "9780061120084",
                            NumberOfPages = 281,
                            PublicationYear = "1960",
                            PublishingHouse = "J.B. Lippincott & Co.",
                            Title = "To Kill a Mockingbird",
                            UpdatedAt = new DateTime(2024, 12, 30, 20, 37, 14, 724, DateTimeKind.Local).AddTicks(3720),
                            UserId = new Guid("4cccf9b3-459a-4d06-95c5-222e0451ca3a")
                        });
                });

            modelBuilder.Entity("LectorNet.Domain.Models.Challenges.Challenge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("EstimatedEndDate")
                        .HasColumnType("date");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("LectorNet.Domain.Models.Invitations.Invitation", b =>
                {
                    b.Property<Guid>("SenderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("SenderId", "ReceiverId");

                    b.HasIndex("ReceiverId")
                        .IsUnique();

                    b.HasIndex("SenderId")
                        .IsUnique();

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("LectorNet.Domain.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("LectorNet.Domain.Models.Summaries.Summary", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Vote")
                        .HasColumnType("int");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("Summaries");
                });

            modelBuilder.Entity("LectorNet.Domain.Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<int?>("ReadingStatistics")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4cccf9b3-459a-4d06-95c5-222e0451ca3a"),
                            CreatedAt = new DateTime(2024, 12, 30, 20, 37, 14, 963, DateTimeKind.Local).AddTicks(3650),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "$2a$11$e1CzJ.x1lFAiPLS2vEp7w.aKdrrekhR2e8f8pBAsSl5xbBtG2K1XO",
                            Role = "RegularUser",
                            UpdatedAt = new DateTime(2024, 12, 30, 20, 37, 14, 963, DateTimeKind.Local).AddTicks(3740)
                        });
                });

            modelBuilder.Entity("LectorNet.Domain.Models.UsersBooksReactions.UserBookReaction", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Reaction")
                        .HasColumnType("int");

                    b.HasKey("UserId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("UsersBooksReactions");
                });

            modelBuilder.Entity("LectorNet.Domain.Models.UsersReviews.UserReview", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("UserId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("UsersReviews");
                });

            modelBuilder.Entity("LectorNet.Domain.Models.BookExchanges.BookExchange", b =>
                {
                    b.HasOne("LectorNet.Domain.Models.Books.Book", "Book")
                        .WithOne()
                        .HasForeignKey("LectorNet.Domain.Models.BookExchanges.BookExchange", "BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LectorNet.Domain.Models.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LectorNet.Domain.Models.Users.User", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Owner");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("LectorNet.Domain.Models.Books.Book", b =>
                {
                    b.HasOne("LectorNet.Domain.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LectorNet.Domain.Models.Challenges.Challenge", b =>
                {
                    b.HasOne("LectorNet.Domain.Models.Books.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LectorNet.Domain.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LectorNet.Domain.Models.Invitations.Invitation", b =>
                {
                    b.HasOne("LectorNet.Domain.Models.Users.User", "Receiver")
                        .WithOne()
                        .HasForeignKey("LectorNet.Domain.Models.Invitations.Invitation", "ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LectorNet.Domain.Models.Users.User", "Sender")
                        .WithOne()
                        .HasForeignKey("LectorNet.Domain.Models.Invitations.Invitation", "SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("LectorNet.Domain.Models.Message", b =>
                {
                    b.HasOne("LectorNet.Domain.Models.Users.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LectorNet.Domain.Models.Users.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("LectorNet.Domain.Models.Summaries.Summary", b =>
                {
                    b.HasOne("LectorNet.Domain.Models.Users.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LectorNet.Domain.Models.Books.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LectorNet.Domain.Models.UsersBooksReactions.UserBookReaction", b =>
                {
                    b.HasOne("LectorNet.Domain.Models.Books.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LectorNet.Domain.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LectorNet.Domain.Models.UsersReviews.UserReview", b =>
                {
                    b.HasOne("LectorNet.Domain.Models.Books.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LectorNet.Domain.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
